
configfile: "config.yaml"

rule all:
    input:
        expand("work/05_calls_filt/{sample}.filtered.vcf", sample=config["samples"]), 
        
rule fastp:
    input:
        fq1="data/{sample}_1.fastq.gz",
        fq2="data/{sample}_2.fastq.gz"
    output:
        trim_fq1="work/01_preprocessing/{sample}_1.fastq.gz",
        trim_fq2="work/01_preprocessing/{sample}_2.fastq.gz",
        html="work/01_preprocessing/{sample}_report.html",
        json="work/01_preprocessing/{sample}_report.json"
    threads: 2
    log:
        "logs/fastp/{sample}.log"
    conda:
        "envs/fastp.yaml"
    envmodules:
        "fastp/0.20.1"
    shell:
        """
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html} \
            -j {output.json}
        """
        

rule bwa_mem:
    input:
        genome=config["genome"],
        fq1="work/01_preprocessing/{sample}_1.fastq.gz",
        fq2="work/01_preprocessing/{sample}_2.fastq.gz"
    output:
        bam="work/02_mapped/{sample}.bam"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        extra=r"-R '@RG\tID:{sample}\tSM:{sample}'"
    threads: 8
    conda:
        "envs/bwa.yaml"
    envmodules:
        "bwa/0.7.17"
    shell:
        """
        bwa mem \
            -t {threads} \
            {params.extra} \
            {input.genome} \
            {input.fq1} \
            {input.fq2} \
        | sambamba view \
            -S \
            -t 2 \
            -f bam \
            -o {output.bam}
        """


rule sambamba_sort:
    input:
        "work/02_mapped/{sample}.bam"
    output:
        "work/02_mapped/{sample}.sorted.bam"
    log:
        "logs/sambamba-sort/{sample}.log"
    threads: 8
    conda:
        "envs/sambamba.yaml"
    envmodules:
        "sambamba/0.7.1"
    shell:
        """
        sambamba sort \
            -t {threads} \
            -o {output} \
            {input}
        """

rule sambamba_markdup:
    input:
        "work/02_mapped/{sample}.sorted.bam"
    output:
        "work/03_mapped_rmdup/{sample}.rmdup.bam"
    log:
        "logs/sambamba-markdup/{sample}.log"
    threads: 8
    conda:
        "envs/sambamba.yaml"
    envmodules:
        "sambamba/0.7.1"
    shell:
        """
        sambamba markdup \
            -t {threads} \
            -r \
            {input} \
            {output}
        """

rule sambamba_index_rmdup:
    input:
        "work/03_mapped_rmdup/{sample}.rmdup.bam"
    output:
        "work/03_mapped_rmdup/{sample}.rmdup.bam.bai"
    log:
        "logs/sambamba-index/{sample}.log"
    threads: 8
    conda:
        "envs/sambamba.yaml"
    envmodules:
        "sambamba/0.7.1"
    shell:
        """
        sambamba \
            -t {threads} \
            {input}
        """

rule freebayes:
    input:
        alns="work/03_mapped_rmdup/{sample}.rmdup.bam",
        ref=config["genome"]
    output:
        vcf="work/04_calls/{sample}.vcf"
    log:
        "logs/freebayes/{sample}.log"
    threads: 1
    conda:
        "envs/freebayes.yaml"
    envmodules:
        "freebayes/1.3.2"
    shell:
        """
        freebayes \
            -f {ref} \
            {input.alns} \
        > {output.vcf}
        """

rule filter_vcf:
    input:
        "work/04_calls/{sample}.vcf"
    output:
        "work/05_calls_filt/{sample}.filtered.vcf"
    params:
        extra="--remove-indels --min-meanDP 10 --minQ 100 --max-maf 0 --recode --recode-INFO-all"
    log:
        "logs/vcftools/{sample}_filter.log"
    conda:
        "envs/vcftools.yaml"
    envmodules:
        "vcftools/1.2.10"
    shell:
        """
        vcftools filter \
            {params.extra} \
            --vcf {input} \
            --stdout \
        > {output}
        """