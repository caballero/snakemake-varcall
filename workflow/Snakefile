
configfile: "config.yaml"

rule all:
    input:
        expand("05_calls_filt/{sample}.filtered.vcf", sample=config["samples"]), 
        
rule fastp:
    input:
        fq1="data/{sample}_1.fastq.gz"
        fq2="data/{sample}_2.fastq.gz"
    output:
        trim_fq1="01_preprocessing/{sample}_1.fastq.gz"
        trim_fq2="01_preprocessing/{sample}_2.fastq.gz"
        html="01_preprocessing/{sample}_report.html",
        json="01_preprocessing/{sample}_report.json"
    threads: 2
    log:
        "logs/fastp/{sample}.log"
    shell:
        "fastp "
            "-w {threads} "
            "-i {input.fq1} "
            "-I {input.fq2} "
            "-o {output.trim_fq1} "
            "-O {output.trim_fq2} "
            "-h {output.html} "
            "-j {output.json} "
        

rule bwa_mem:
    input:
        genome=config["genome"]
        fq1="01_preprocessing/{sample}_1.fastq.gz"
        fq2="01_preprocessing/{sample}_2.fastq.gz"
    output:
        bam="02_mapped/{sample}.bam"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        extra=r"-R '@RG\tID:{sample}\tSM:{sample}'"
    threads: 8
    shell:
        "bwa mem "
            "-t {threads} "
            "{params.extra} "
            "{input.genome} "
            "{input.fq1} "
            "{input.fq2} "
        " | sambamba view "
            "-S "
            "-t 2 "
            "-f bam "
            "-o {output.bam}"


rule sambamba_sort:
    input:
        "02_mapped/{sample}.bam"
    output:
        "02_mapped/{sample}.sorted.bam"
    log:
        "logs/sambamba-sort/{sample}.log"
    threads: 8
    shell:
        "sambamba sort "
            "-t {threads} "
            "-o {output} "
            "{input}"

rule sambamba_index:
    input:
        "02_mapped/{sample}.sorted.bam"
    output:
        "02_mapped/{sample}.sorted.bam.bai"
    log:
        "logs/sambamba-index/{sample}.log"
    threads: 8
    shell:
        "sambamba index "
            "-t {threads} "
            "{input}"


rule sambamba_markdup:
    input:
        "02_mapped/{sample}.sorted.bam"
    output:
        "03_mapped_rmdup/{sample}.rmdup.bam"
    log:
        "logs/sambamba-markdup/{sample}.log"
    threads: 8
    shell:
        "sambamba markdup "
            "-t {threads} "
            "-r "
            "{input} "
            "{output}"

rule sambamba_index_rmdup:
    input:
        "03_mapped_rmdup/{sample}.rmdup.bam"
    output:
        "03_mapped_rmdup/{sample}.rmdup.bam.bai"
    log:
        "logs/sambamba-index/{sample}.log"
    threads: 8
    shell:
        "samamba "
            "-t {threads} "
            "{input}"

rule freebayes:
    input:
        alns="03_mapped_rmdup/{sample}.rmdup.bam",
        idxs="03_mapped_rmdup/{sample}.rmdup.bam.bai",
        ref=config["genome"]
    output:
        vcf="04_calls/{sample}.vcf"
    log:
        "logs/freebayes/{sample}.log"
    threads: 1
    shell:
        "freebayes "
            "-f {ref} "
            "{input.alns} "
        "> {output.vcf}" 

rule filter_vcf:
    input:
        "04_calls/{sample}.vcf"
    output:
        "05_calls_filt/{sample}.filtered.vcf"
    params:
        extra="--remove-indels --min-meanDP 10 --minQ 100 --max-maf 0 --recode --recode-INFO-all"
    log:
        "logs/vcftools/{sample}_filter.log"
    shell:
        "vcftools filter "
            "{params.extra} "
            "--vcf {input} "
            "--stdout "
        "> {output}"

rule annotate_variants:
    input:
        calls="05_calls_filt/{sample}.filtered.vcf",  # .vcf, .vcf.gz or .bcf
        cache="resources/vep/cache",  # can be omitted if fasta and gff are specified
        #plugins="resources/vep/plugins",
    output:
        calls="06_calls_annot/{sample}.annotated.vcf.gz",  # .vcf, .vcf.gz or .bcf
        stats="06_calls_annot/{sample}.variants.html",
    params:
        plugins=[],
        extra="--everything",  # optional: extra arguments
    log:
        "logs/vep/{sample}_annotate.log",
    threads: 4
    wrapper:
        "v2.6.0/bio/vep/annotate"

 