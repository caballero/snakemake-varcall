# Snakemake workflow for variant calling
# Juan Caballero
# (C) 2024

import os
import yaml

wildcard_constraints:
    sample=r".+\d+"

# some subroutines needed
def dump_config_to_yaml(config, output_dir):
    output_file = os.path.join(output_dir, "run_config.yaml")
    with open(output_file, 'w') as configfile:
        yaml.dump(config, configfile)

# setting configurations
configfile: "config.yaml"
outdir = workflow.overwrite_workdir #get outdir from -d option of snakemake
config['outdir'] = outdir
os.makedirs(config['outdir'], exist_ok=True)
fastq_dir = str(config['fastq_dir'])

# before running the process
onstart:
    print("\n==== Variant calling pipeline starts ====")
    print("Configuration:")
    print(config)
    print("=" * 80)
    print()
    dump_config_to_yaml(config, '.')

# main workflow
rule all:
    input:
        expand("03_calls/{sample}_filt.bcf.csi", sample=config["samples"]) 

rule fastp:
    input:
        fq1 = str(fastq_dir) + "/{sample}_1.fastq.gz",
        fq2 = str(fastq_dir) + "/{sample}_2.fastq.gz"
    output:
        trim_fq1 = "01_preprocessing/{sample}_1.fastq.gz",
        trim_fq2 = "01_preprocessing/{sample}_2.fastq.gz",
        html_rep = "01_preprocessing/{sample}_report.html",
        json_rep = "01_preprocessing/{sample}_report.json"
    threads: 10
    log:
        "logs/fastp/{sample}.log"
    #conda:
    #    "envs/fastp.yaml"
    envmodules:
        "fastp/0.20.1"
    shell:
        """
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html_rep} \
            -j {output.json_rep}
        """
        

rule bwa_mem:
    input:
        ref = config["genome"],
        fq1 = "01_preprocessing/{sample}_1.fastq.gz",
        fq2 = "01_preprocessing/{sample}_2.fastq.gz"
    output:
        bam = "02_mapped/{sample}.bam"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        extra = r"-R '@RG\tID:{sample}\tSM:{sample}'"
    threads: 10
    #conda:
    #    "envs/bwa.yaml"
    envmodules:
        "bwa/0.7.17",
        "samtools/1.12"
    shell:
        """
        bwa mem \
            -t {threads} \
            {params.extra} \
            {input.ref} \
            {input.fq1} \
            {input.fq2} \
        | samtools view \
            -b \
            --threads 2 \
            -o {output.bam} \
            -
        """


rule samtools_sort:
    input:
        bam_in = "02_mapped/{sample}.bam"
    output:
        bam_out = "02_mapped/{sample}_sorted.bam"
    log:
        "logs/samtools_sort/{sample}.log"
    threads: 10
    #conda:
    #    "envs/sambamba.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        sambamba sort \
            --threads {threads} \
            -o {output.bam_out} \
            {input.bam_in}
        """

rule samtools_markdup:
    input:
        bam_in = "02_mapped/{sample}_sorted.bam"
    output:
        bam_out = "02_mapped/{sample}_rmdup.bam"
    log:
        "logs/samtools_markdup/{sample}.log"
    threads: 10
    #conda:
    #    "envs/sambamba.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools markdup \
            --threads {threads} \
            -r \
            {input.bam_in} \
            {output.bam_out}
        """

rule samtools_index_rmdup:
    input:
        bam = "02_mapped/{sample}_rmdup.bam"
    output:
        bai = "02_mapped/{sample}_rmdup.bam.bai"
    log:
        "logs/sambamba_index/{sample}.log"
    threads: 1
    #conda:
    #    "envs/sambamba.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools \
            index \
            {input.bam}
        """

rule bcftools_mpileup:
    input:
        ref = config["genome"],
        bam = "02_mapped/{sample}_rmdup.bam",
        bai = "02_mapped/{sample}_rmdup.bam.bai"
    output:
        bcf_pil = "03_calls/{sample}_pileup.bcf"
    params:
        par = config["bcf_mpileup_param"]
    log:
        "logs/bcftoos_mpileup/{sample}.log"
    threads: 10
    #conda:
    #    "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            mpileup \
            -f {input.ref} \
            {params.par} \
            --threads {threads} \
            -o {output.bcf_pil} \
            {input.bam} 
        """


rule bcftools_call:
    input:
        bcf_pal = "03_calls/{sample}_pileup.bcf"
    output:
        bcf_raw = "03_calls/{sample}_raw.bcf"
    params:
        par = config["bcf_call_param"]
    log:
        "logs/bcftoos_call/{sample}.log"
    threads: 10
    #conda:
    #    "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            call \
            {params.par} \
            --threads {threads} \
            -o {output} \
            {input} 
        """


rule bcftools_norm:
    input:
        ref = config["genome"],
        bcf_raw = "03_calls/{sample}_raw.bcf"
    output:
        bcf_nor = "03_calls/{sample}_norm.bcf"
    params:
        par = config["bcf_norm_param"]
    log:
        "logs/bcftoos_norm/{sample}.log"
    threads: 10
    #conda:
    #    "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            norm \
            -f {input.ref} \
            {params.par} \
            --threads {threads} \
            -o {output.bcf_nor} \
            {input.bcf_raw} 
        """


rule bcftools_filter:
    input:
        bcf_nor = "03_calls/{sample}_norm.bcf"
    output:
        bcf_fil = "03_calls/{sample}_filt.bcf"
    params:
        par = config["bcf_filter_param"]
    log:
        "logs/bcftoos_filter/{sample}.log"
    threads: 10
    #conda:
    #    "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            filter \
            {params.par} \
            --threads {threads} \
            -o {output.bcf_fil} \
            {input.bcf_nor} 
        """


rule bcftools_index:
    input:
        bcf_fil = "03_calls/{sample}_filt.bcf"
    output:
        bcf_idx = "03_calls/{sample}_filt.bcf.csi"
    log:
        "logs/bcftoos_index/{sample}.log"
    threads: 1
    #conda:
    #    "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            index \
            --threads {threads} \
            {input.bcf_fil} 
        """


onsuccess:
    print("\n==== Workflow finished successfully! ====\n")
