# Snakemake workflow for variant calling
# Juan Caballero
# (C) 2024

import os
import yaml

# some subroutines needed
def dump_config_to_yaml(config, output_dir):
    output_file = os.path.join(output_dir, "run_config.yaml")
    with open(output_file, 'w') as configfile:
        yaml.dump(config, configfile)

# setting configurations
configfile: "config.yaml"
outdir = workflow.overwrite_workdir #get outdir from -d option of snakemake
config['outdir'] = outdir
os.makedirs(config['outdir'], exist_ok=True)
fastq_dir = str(config['fastq_dir'])

# before running the process
onstart:
    print("\n==== Variant calling pipeline starts ====")
    print("Configuration:")
    print(config)
    print("=" * 80)
    print()
    dump_config_to_yaml(config, config['outdir'])

# main workflow
rule all:
    input:
        expand(str(outdir) + "/04_calls/{sample}.filt.bcf.csi", sample=config["samples"]) 

rule fastp:
    input:
        fq1 = str(fastq_dir) + "/{sample}_1.fastq.gz",
        fq2 = str(fastq_dir) + "/{sample}_2.fastq.gz"
    output:
        trim_fq1 = str(outdir) + "/01_preprocessing/{sample}_1.fastq.gz",
        trim_fq2 = str(outdir) + "/01_preprocessing/{sample}_2.fastq.gz",
        html_rep = str(outdir) + "/01_preprocessing/{sample}_report.html",
        json_rep = str(outdir) + "/01_preprocessing/{sample}_report.json"
    threads: 10
    log:
        "logs/fastp/{sample}.log"
    conda:
        "envs/fastp.yaml"
    envmodules:
        "fastp/0.20.1"
    shell:
        """
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html_rep} \
            -j {output.json_rep}
        """
        

rule bwa_mem:
    input:
        ref = config["genome"],
        fq1 = str(outdir) + "/01_preprocessing/{sample}_1.fastq.gz",
        fq2 = str(outdir) + "/01_preprocessing/{sample}_2.fastq.gz"
    output:
        str(outdir) + "/02_mapped/{sample}.bam"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        extra = r"-R '@RG\tID:{sample}\tSM:{sample}'"
    threads: 10
    conda:
        "envs/bwa.yaml"
    envmodules:
        "bwa/0.7.17",
        "sambamba/0.7.1"
    shell:
        """
        bwa mem \
            -t {threads} \
            {params.extra} \
            {input.ref} \
            {input.fq1} \
            {input.fq2} \
        | sambamba view \
            -S \
            -t 2 \
            -f bam \
            -o {output} \
            /dev/stdin
        """


rule sambamba_sort:
    input:
        str(outdir) + "/02_mapped/{sample}.bam"
    output:
        str(outdir) + "/02_mapped/{sample}.sorted.bam"
    log:
        "logs/sambamba_sort/{sample}.log"
    threads: 10
    conda:
        "envs/sambamba.yaml"
    envmodules:
        "sambamba/0.7.1"
    shell:
        """
        sambamba sort \
            -t {threads} \
            -o {output} \
            {input}
        """

rule sambamba_markdup:
    input:
        str(outdir) + "/02_mapped/{sample}.sorted.bam"
    output:
        str(outdir) + "/03_mapped_rmdup/{sample}.rmdup.bam"
    log:
        "logs/sambamba_markdup/{sample}.log"
    threads: 10
    conda:
        "envs/sambamba.yaml"
    envmodules:
        "sambamba/0.7.1"
    shell:
        """
        sambamba markdup \
            -t {threads} \
            -r \
            {input} \
            {output}
        """

rule sambamba_index_rmdup:
    input:
        str(outdir) + "/03_mapped_rmdup/{sample}.rmdup.bam"
    output:
        str(outdir) + "/03_mapped_rmdup/{sample}.rmdup.bam.bai"
    log:
        "logs/sambamba_index/{sample}.log"
    threads: 10
    conda:
        "envs/sambamba.yaml"
    envmodules:
        "sambamba/0.7.1"
    shell:
        """
        sambamba \
            index \
            -t {threads} \
            {input}
        """

rule bcftools_mpileup:
    input:
        ref = config["genome"],
        bam = str(outdir) + "/03_mapped_rmdup/{sample}.rmdup.bam",
        bai = str(outdir) + "/03_mapped_rmdup/{sample}.rmdup.bam.bai"
    output:
        str(outdir) + "/04_calls/{sample}.pileup.bcf"
    params:
        par = config["bcf_mpileup_param"]
    log:
        "logs/bcftoos_mpileup/{sample}.log"
    threads: 10
    conda:
        "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            mpileup \
            -f {input.ref} \
            {params.par} \
            --threads {threads} \
            -o {output} \
            {input.bam} 
        """


rule bcftools_call:
    input:
        str(outdir) + "/04_calls/{sample}.pileup.bcf"
    output:
        str(outdir) + "/04_calls/{sample}.raw.bcf"
    params:
        par = config["bcf_call_param"]
    log:
        "logs/bcftoos_call/{sample}.log"
    threads: 10
    conda:
        "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            call \
            {params.par} \
            --threads {threads} \
            -o {output} \
            {input} 
        """


rule bcftools_norm:
    input:
        ref = config["genome"],
        bcf = str(outdir) + "/04_calls/{sample}.raw.bcf"
    output:
        str(outdir) + "/04_calls/{sample}.norm.bcf"
    params:
        par = config["bcf_norm_param"]
    log:
        "logs/bcftoos_norm/{sample}.log"
    threads: 10
    conda:
        "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            norm \
            -f {input.ref} \
            {params.par} \
            --threads {threads} \
            -o {output} \
            {input.bcf} 
        """


rule bcftools_filter:
    input:
        str(outdir) + "/04_calls/{sample}.norm.bcf"
    output:
        str(outdir) + "/04_calls/{sample}.filt.bcf"
    params:
        par = config["bcf_filter_param"]
    log:
        "logs/bcftoos_filter/{sample}.log"
    threads: 10
    conda:
        "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            filter \
            {params.par} \
            --threads {threads} \
            -o {output} \
            {input} 
        """


rule bcftools_index:
    input:
        str(outdir) + "/04_calls/{sample}.filt.bcf"
    output:
        str(outdir) + "/04_calls/{sample}.filt.bcf.csi"
    log:
        "logs/bcftoos_index/{sample}.log"
    threads: 10
    conda:
        "envs/bcftools.yaml"
    envmodules:
        "bcftools/1.10.2"
    shell:
        """
        bcftools \
            index \
            --threads {threads} \
            {input} 
        """


onsuccess:
    print("\n==== Workflow finished successfully! ====\n")
